// @strict-types

&НаКлиенте
Процедура Сформировать(Команда)
	Серверная();
КонецПроцедуры

&НаСервере
Процедура Серверная()
	Если ПустаяСтрока(ФИОРебенка) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Поле = Элементы.ФИОРебенка;
		Сообщение.Текст = НСтр("ru = 'Укажите ФИО ребенка для формирования договора на оказание платных услуг'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Элементы.ТабДок.ТекущаяСтрока) ИЛИ ТабДок.Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Укажите хотя бы одну ДОП для формирования договора на оказание платных услуг ребенку'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	// Получаем нужный макет договора
	Если ТабДок.Количество() = 1 Тогда
		Договор = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Договор1");
	КонецЕсли;
	Если ТабДок.Количество() = 2 Тогда
		Договор = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Договор2");
	КонецЕсли;
	
	Попытка
		// Получаем объект Word из макета
		MSWord = Договор.Получить();
		Документ = MSWord.Application.Documents(1);
		
		// Получаем данные из первой строки табличной части
		ПерваяСтрока = ТабДок[0];
		НаименованиеДОП1 = ПерваяСтрока.НаименованиеДОП;
		ФормаОбучения1 = ПерваяСтрока.ФормаОбучения;
		Направленность1 = ПерваяСтрока.Направленность;
		Стоимость1 = ПерваяСтрока.Стоимость;
		КоличествоЧасовВНеделю1 = ПерваяСтрока.КоличествоЧасовВНеделю;
		
		// Рассчитываем значения для первой строки
		ЧасовВГод1 = КоличествоЧасовВНеделю1 * КоличествоМесяцев * 4;
		СуммаВМесяц1 = Стоимость1 * КоличествоЧасовВНеделю1 * 4;
		СуммаВГод1 = Стоимость1 * ЧасовВГод1;
		
		// Если есть вторая строка - получаем ее данные
		Если ТабДок.Количество() = 2 Тогда
			ВтораяСтрока = ТабДок[1];
			НаименованиеДОП2 = ВтораяСтрока.НаименованиеДОП;
			ФормаОбучения2 = ВтораяСтрока.ФормаОбучения;
			Направленность2 = ВтораяСтрока.Направленность;
			Стоимость2 = ВтораяСтрока.Стоимость;
			КоличествоЧасовВНеделю2 = ВтораяСтрока.КоличествоЧасовВНеделю;
			
			ЧасовВГод2 = КоличествоЧасовВНеделю2 * КоличествоМесяцев * 4;
			СуммаВМесяц2 = Стоимость2 * КоличествоЧасовВНеделю2 * 4;
			СуммаВГод2 = Стоимость2 * ЧасовВГод2;
		КонецЕсли;
		
		СписокЗамен = Новый Массив;
		СписокЗамен.Добавить("<FIOParent>;" + ФИОРодителя);
		СписокЗамен.Добавить("<Date>;" + Формат(ТекущаяДатаСеанса(), "ДЛФ=ДД"));
		СписокЗамен.Добавить("<Nomer>;" + Номер);
		СписокЗамен.Добавить("<FIOchild>;" + ФИОРебенка);
		СписокЗамен.Добавить("<Address>;" + Адрес);
		СписокЗамен.Добавить("<DateBeg>;" + Формат(ДатаНачала, НСтр("ru='ДФ=''дд.ММ.гггг'''")));
		СписокЗамен.Добавить("<DateEnd>;" + Формат(ДатаОкончания, НСтр("ru='ДФ=''дд.ММ.гггг'''")));
		СписокЗамен.Добавить("<Srok>;" + КоличествоМесяцев);
		СписокЗамен.Добавить("<FIOParentInicial>;" + ПреобразоватьФИО(ФИОРодителя));
		
		// Данные для первой строки
		СписокЗамен.Добавить("<NameDOP>;" + НаименованиеДОП1);
		СписокЗамен.Добавить("<FormOb>;" + ФормаОбучения1);
		СписокЗамен.Добавить("<Napravl>;" + Направленность1);
		СписокЗамен.Добавить("<SumOne>;" + Стоимость1);
		СписокЗамен.Добавить("<HoursWeek>;" + КоличествоЧасовВНеделю1);
		СписокЗамен.Добавить("<HoursYear>;" + ЧасовВГод1);
		СписокЗамен.Добавить("<SumOneProp>;" + ЧислоПрописьюБезНоля(Стоимость1));
		СписокЗамен.Добавить("<SumMounth>;" + СуммаВМесяц1);
		СписокЗамен.Добавить("<SumMounthProp>;" + ЧислоПрописьюБезНоля(СуммаВМесяц1));
		СписокЗамен.Добавить("<SumYear>;" + СуммаВГод1);
		СписокЗамен.Добавить("<SumYearProp>;" + ЧислоПрописьюБезНоля(СуммаВГод1));
		
		Если ТабДок.Количество() = 2 Тогда
			СписокЗамен.Добавить("<NameDOP2>;" + НаименованиеДОП2);
			СписокЗамен.Добавить("<FormOb2>;" + ФормаОбучения2);
			СписокЗамен.Добавить("<Napravl2>;" + Направленность2);
			СписокЗамен.Добавить("<SumOne2>;" + Стоимость2);
			СписокЗамен.Добавить("<HoursWeek2>;" + КоличествоЧасовВНеделю2);
			СписокЗамен.Добавить("<HoursYear2>;" + ЧасовВГод2);
			СписокЗамен.Добавить("<SumOneProp2>;" + ЧислоПрописьюБезНоля(Стоимость2));
			СписокЗамен.Добавить("<SumMounth2>;" + СуммаВМесяц2);
			СписокЗамен.Добавить("<SumMounthProp2>;" + ЧислоПрописьюБезНоля(СуммаВМесяц2));
			СписокЗамен.Добавить("<SumYear2>;" + СуммаВГод2);
			СписокЗамен.Добавить("<SumYearProp2>;" + ЧислоПрописьюБезНоля(СуммаВГод2));
		КонецЕсли;
		
		// Выполняем замены
		Для Каждого СтрокаЗамены Из СписокЗамен Цикл
			Части = СтрРазделить(СтрокаЗамены, ";");
			Шаблон = Части[0];
			Значение = Части[1];
			
			// Заменяем все вхождения шаблона
			Пока Истина Цикл
				Найдено = Документ.Content.Find.Execute(Шаблон,Ложь,Истина,Ложь,, ,Истина,,Ложь,Значение);
				Если Не Найдено Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Показываем результат
		MSWord.Application.Visible = Истина;
		MSWord.Activate();
		
	Исключение
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Ошибка при формировании договора'");
		Сообщение.Сообщить();
		Попытка
			Если MSWord <> Неопределено Тогда
				MSWord.Application.Quit();
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецПопытки;  
КонецПроцедуры

&НаКлиенте
Процедура ФИОРебенкаПриИзменении(Элемент)
	Адрес = ПолучитьАдресНаСервере(ФИОРебенка);
	ФИОРодителя = ПолучитьФИОРодителяНаСервере(ФИОРебенка);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьАдресНаСервере(Знач ФИОРеб)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Дети.Адрес КАК Адрес
	|ИЗ
	|	Справочник.Дети КАК Дети
	|ГДЕ
	|	Дети.Ссылка = &ФИОРебенка";
	
	Запрос.УстановитьПараметр("ФИОРебенка", ФИОРеб);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Адрес;
	КонецЕсли;
КонецФункции 

&НаСервереБезКонтекста
Функция ПолучитьФИОРодителяНаСервере(Знач ФИОРеб)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Дети.ФИОРодителя КАК ФИОРодителя
	|ИЗ
	|	Справочник.Дети КАК Дети
	|ГДЕ
	|	Дети.Ссылка = &ФИОРебенка";
	
	Запрос.УстановитьПараметр("ФИОРебенка", ФИОРеб);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.ФИОРодителя;
	КонецЕсли;
КонецФункции 

&НаКлиенте
Процедура ТабДокНаименованиеДОППриИзменении(Элемент)
	// Проверяем, есть ли записи в табличной части
	Если ТабДок.Количество() > 0 Тогда
		// Для каждой строки табличной части
		Для Каждого Строка Из ТабДок Цикл
			// Получаем ФИО ребенка
			НаимДОП = Строка.НаименованиеДОП;          
			// Получаем возрастную группу с сервера
			ФормаОбучения = ПолучитьФормуОбученияНаСервере(НаимДОП);
			Направленность = ПолучитьНаправленностьНаСервере(НаимДОП);
			Стоимость = ПолучитьСтоимостьНаСервере(НаимДОП);
			КоличествоЧасовВНеделю = ПолучитьКоличествоЧасовВНеделю(НаимДОП);
			// Заполняем реквизит возрастной группы в строке табличной части
			Строка.ФормаОбучения = ФормаОбучения;
			Строка.Направленность = Направленность;
			Строка.Стоимость = Стоимость;
			Строка.КоличествоЧасовВНеделю = КоличествоЧасовВНеделю;
		КонецЦикла;
	Иначе
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Список посещения пуст.'");
		Сообщение.Сообщить();
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКоличествоЧасовВНеделю(Знач НаимДОП)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПлатныеУслуги.КоличествоЧасовВНеделю КАК КоличествоЧасовВНеделю
	|ИЗ
	|	Справочник.ПлатныеУслуги КАК ПлатныеУслуги
	|ГДЕ
	|	ПлатныеУслуги.Ссылка = &НаименованиеДОП";
	
	Запрос.УстановитьПараметр("НаименованиеДОП", НаимДОП);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.КоличествоЧасовВНеделю;
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьФормуОбученияНаСервере(Знач НаимДОП)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПлатныеУслуги.ФормаОбучения.Ссылка КАК ФормаОбучения
	|ИЗ
	|	Справочник.ПлатныеУслуги КАК ПлатныеУслуги
	|ГДЕ
	|	ПлатныеУслуги.Ссылка = &НаименованиеДОП";
	
	Запрос.УстановитьПараметр("НаименованиеДОП", НаимДОП);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.ФормаОбучения;
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНаправленностьНаСервере(Знач НаимДОП)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПлатныеУслуги.ВидУровеньНаправленностьДОП КАК Направленность
	|ИЗ
	|	Справочник.ПлатныеУслуги КАК ПлатныеУслуги
	|ГДЕ
	|	ПлатныеУслуги.Ссылка = &НаименованиеДОП";
	
	Запрос.УстановитьПараметр("НаименованиеДОП", НаимДОП);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Направленность;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ЧислоПрописьюБезНоля(Стоимость)
	СтрокаПрописью = ЧислоПрописью(Стоимость, "ДП = Истина", НСтр("ru='рубль, рубля, рублей, м'"));
	СтрокаПрописью = СтрокаОбрезатьСправа(СтрокаПрописью, 5);
	Возврат СтрокаПрописью;
КонецФункции

&НаСервере
Функция СтрокаОбрезатьСправа(Строка, КоличествоСимволов)
	Возврат Лев(Строка, СтрДлина(Строка) - КоличествоСимволов);
КонецФункции

&НаСервере
Функция ПреобразоватьФИО(ФИО)
	// Разделяем строку на части по пробелам
	МассивФИО = СтрокаРазделить(ФИО, " ");
	
	// Проверяем количество частей
	Если МассивФИО.Количество() = 3 Тогда
		// Фамилия, Имя, Отчество
		Фамилия = МассивФИО[0];
		Имя = Лев(МассивФИО[1], 1) + ".";
		Отчество = Лев(МассивФИО[2], 1) + ".";
		Возврат Имя + Отчество + " " + Фамилия;
	ИначеЕсли МассивФИО.Количество() = 2 Тогда
		// Фамилия, Имя
		Фамилия = МассивФИО[0];
		Имя = Лев(МассивФИО[1], 1) + ".";
		Возврат Имя + " " + Фамилия;
	Иначе
		// Некорректный формат ФИО
		Возврат "";
	КонецЕсли;
КонецФункции

&НаСервере
Функция СтрокаРазделить(Строка, Разделитель)
	Массив = Новый Массив;
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Массив.Добавить(Лев(Строка, Позиция - 1));
		Строка = Сред(Строка, Позиция + 1);
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	Массив.Добавить(Строка);
	Возврат Массив;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтоимостьНаСервере(Знач НаимДОП)
	РегЦеныНаДопУслуги = РегистрыСведений.ЦеныНаДопУслуги.ПолучитьПоследнее(ТекущаяДатаСеанса(),Новый Структура ("ДополнительнаяОбщеобразовательнаяПрограмма", НаимДоп));
	Возврат РегЦеныНаДопУслуги.ТарифЗаОдноЗанятие;
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ДатаНачала ='20241001';
	ДатаОкончания ='20250531';
	КоличествоМесяцев = КоличествоМесяцевМеждуДатами(ДатаНачала, ДатаОкончания);
	СтандартнаяОбработка = Истина;
КонецПроцедуры

&НаСервереБезКонтекста
Функция КоличествоМесяцевМеждуДатами(ДатаНачала, ДатаОкончания)
	// Проверка на корректность дат
	Если НЕ ТипЗнч(ДатаНачала) = Тип("Дата") ИЛИ НЕ ТипЗнч(ДатаОкончания) = Тип("Дата") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Проверка на правильность порядка дат
	Если ДатаОкончания < ДатаНачала Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Рассчитываем количество месяцев между датами
	КоличествоМесяцев = (Год(ДатаОкончания) - Год(ДатаНачала)) * 12 
	+ (Месяц(ДатаОкончания) - Месяц(ДатаНачала));
	
	// Проверяем, есть ли остаток дней
	Если День(ДатаОкончания) >= День(ДатаНачала) Тогда
		КоличествоМесяцев = КоличествоМесяцев + 1;
	КонецЕсли;
	
	Возврат КоличествоМесяцев;
КонецФункции

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	КоличествоМесяцев = КоличествоМесяцевМеждуДатами(ДатаНачала, ДатаОкончания);
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	КоличествоМесяцев = КоличествоМесяцевМеждуДатами(ДатаНачала, ДатаОкончания);
КонецПроцедуры
